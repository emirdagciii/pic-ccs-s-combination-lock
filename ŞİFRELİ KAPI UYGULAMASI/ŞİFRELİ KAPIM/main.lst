CCS PCM C Compiler, Version 5.015, 5967               21-May-24 04:05

               Filename:   C:\Users\Taha\Desktop\Mikro Bilgisayarlar Projem\ÞÝFRELÝ KAPIM\main.lst

               ROM used:   1131 words (14%)
                           Largest free fragment is 2048
               RAM used:   33 (9%) at main() level
                           46 (12%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3EF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0072:  DATA 0C,28
0073:  DATA 61,39
0074:  DATA 6F,36
0075:  DATA 61,10
0076:  DATA C7,34
0077:  DATA F2,34
0078:  DATA EE,34
0079:  DATA 7A,00
007A:  DATA 8C,2B
007B:  DATA 45,26
007C:  DATA C3,27
007D:  DATA CD,22
007E:  DATA 00,01
007F:  DATA 8C,25
0080:  DATA 69,36
0081:  DATA 69,3A
0082:  DATA EC,32
0083:  DATA 6E,32
0084:  DATA E9,10
0085:  DATA 00,00
*
01D7:  MOVF   0B,W
01D8:  MOVWF  3B
01D9:  BCF    0B.7
01DA:  BSF    03.5
01DB:  BSF    03.6
01DC:  BSF    0C.7
01DD:  BSF    0C.0
01DE:  NOP
01DF:  NOP
01E0:  BCF    03.5
01E1:  BCF    03.6
01E2:  BTFSC  3B.7
01E3:  BSF    0B.7
01E4:  BSF    03.6
01E5:  MOVF   0C,W
01E6:  ANDLW  7F
01E7:  BTFSC  03.2
01E8:  GOTO   22B
01E9:  BCF    03.6
01EA:  MOVWF  3B
01EB:  BSF    03.6
01EC:  MOVF   0D,W
01ED:  BCF    03.6
01EE:  MOVWF  3C
01EF:  BSF    03.6
01F0:  MOVF   0F,W
01F1:  BCF    03.6
01F2:  MOVWF  3D
01F3:  MOVF   3B,W
01F4:  MOVWF  3E
01F5:  CALL   1AB
01F6:  MOVF   3C,W
01F7:  BSF    03.6
01F8:  MOVWF  0D
01F9:  BCF    03.6
01FA:  MOVF   3D,W
01FB:  BSF    03.6
01FC:  MOVWF  0F
01FD:  BCF    03.6
01FE:  MOVF   0B,W
01FF:  MOVWF  3E
0200:  BCF    0B.7
0201:  BSF    03.5
0202:  BSF    03.6
0203:  BSF    0C.7
0204:  BSF    0C.0
0205:  NOP
0206:  NOP
0207:  BCF    03.5
0208:  BCF    03.6
0209:  BTFSC  3E.7
020A:  BSF    0B.7
020B:  BSF    03.6
020C:  RLF    0C,W
020D:  RLF    0E,W
020E:  ANDLW  7F
020F:  BTFSC  03.2
0210:  GOTO   22B
0211:  BCF    03.6
0212:  MOVWF  3B
0213:  BSF    03.6
0214:  MOVF   0D,W
0215:  BCF    03.6
0216:  MOVWF  3C
0217:  BSF    03.6
0218:  MOVF   0F,W
0219:  BCF    03.6
021A:  MOVWF  3D
021B:  MOVF   3B,W
021C:  MOVWF  3E
021D:  CALL   1AB
021E:  MOVF   3C,W
021F:  BSF    03.6
0220:  MOVWF  0D
0221:  BCF    03.6
0222:  MOVF   3D,W
0223:  BSF    03.6
0224:  MOVWF  0F
0225:  INCF   0D,F
0226:  BTFSC  03.2
0227:  INCF   0F,F
0228:  BCF    03.6
0229:  GOTO   1D7
022A:  BSF    03.6
022B:  BCF    03.6
022C:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0086:  MOVLW  40
0087:  MOVWF  04
0088:  BCF    03.7
0089:  MOVF   00,W
008A:  BTFSC  03.2
008B:  GOTO   09A
008C:  MOVLW  01
008D:  MOVWF  78
008E:  CLRF   77
008F:  DECFSZ 77,F
0090:  GOTO   08F
0091:  DECFSZ 78,F
0092:  GOTO   08E
0093:  MOVLW  4A
0094:  MOVWF  77
0095:  DECFSZ 77,F
0096:  GOTO   095
0097:  GOTO   098
0098:  DECFSZ 00,F
0099:  GOTO   08C
009A:  RETURN
....................  
....................  
.................... #define LCD_RS_PIN PIN_B7 
.................... #define LCD_RW_PIN PIN_B6 
.................... #define LCD_ENABLE_PIN PIN_B5 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B3 
.................... #define LCD_DATA6 PIN_B2 
.................... #define LCD_DATA7 PIN_B1 
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00FF:  BSF    06.4
....................    output_float(LCD_DATA5); 
0100:  BSF    06.3
....................    output_float(LCD_DATA6); 
0101:  BSF    06.2
....................    output_float(LCD_DATA7); 
0102:  BSF    06.1
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0103:  BCF    03.5
0104:  BSF    06.6
0105:  BSF    03.5
0106:  BCF    06.6
....................    delay_cycles(1); 
0107:  NOP
....................    lcd_output_enable(1); 
0108:  BCF    03.5
0109:  BSF    06.5
010A:  BSF    03.5
010B:  BCF    06.5
....................    delay_cycles(1); 
010C:  NOP
....................    high = lcd_read_nibble(); 
010D:  BCF    03.5
010E:  CALL   0C6
010F:  MOVF   78,W
0110:  MOVWF  46
....................        
....................    lcd_output_enable(0); 
0111:  BCF    06.5
0112:  BSF    03.5
0113:  BCF    06.5
....................    delay_cycles(1); 
0114:  NOP
....................    lcd_output_enable(1); 
0115:  BCF    03.5
0116:  BSF    06.5
0117:  BSF    03.5
0118:  BCF    06.5
....................    delay_us(1); 
0119:  NOP
....................    low = lcd_read_nibble(); 
011A:  BCF    03.5
011B:  CALL   0C6
011C:  MOVF   78,W
011D:  MOVWF  45
....................        
....................    lcd_output_enable(0); 
011E:  BCF    06.5
011F:  BSF    03.5
0120:  BCF    06.5
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0121:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0122:  BCF    06.3
....................    output_drive(LCD_DATA6); 
0123:  BCF    06.2
....................    output_drive(LCD_DATA7); 
0124:  BCF    06.1
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0125:  BCF    03.5
0126:  SWAPF  46,W
0127:  MOVWF  77
0128:  MOVLW  F0
0129:  ANDWF  77,F
012A:  MOVF   77,W
012B:  IORWF  45,W
012C:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00C6:  CLRF   47
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00C7:  BSF    03.5
00C8:  BSF    06.4
00C9:  MOVLW  00
00CA:  BCF    03.5
00CB:  BTFSC  06.4
00CC:  MOVLW  01
00CD:  IORWF  47,F
....................    n |= input(LCD_DATA5) << 1; 
00CE:  BSF    03.5
00CF:  BSF    06.3
00D0:  MOVLW  00
00D1:  BCF    03.5
00D2:  BTFSC  06.3
00D3:  MOVLW  01
00D4:  MOVWF  77
00D5:  BCF    03.0
00D6:  RLF    77,F
00D7:  MOVF   77,W
00D8:  IORWF  47,F
....................    n |= input(LCD_DATA6) << 2; 
00D9:  BSF    03.5
00DA:  BSF    06.2
00DB:  MOVLW  00
00DC:  BCF    03.5
00DD:  BTFSC  06.2
00DE:  MOVLW  01
00DF:  MOVWF  77
00E0:  RLF    77,F
00E1:  RLF    77,F
00E2:  MOVLW  FC
00E3:  ANDWF  77,F
00E4:  MOVF   77,W
00E5:  IORWF  47,F
....................    n |= input(LCD_DATA7) << 3; 
00E6:  BSF    03.5
00E7:  BSF    06.1
00E8:  MOVLW  00
00E9:  BCF    03.5
00EA:  BTFSC  06.1
00EB:  MOVLW  01
00EC:  MOVWF  77
00ED:  RLF    77,F
00EE:  RLF    77,F
00EF:  RLF    77,F
00F0:  MOVLW  F8
00F1:  ANDWF  77,F
00F2:  MOVF   77,W
00F3:  IORWF  47,F
....................     
....................    return(n); 
00F4:  MOVF   47,W
00F5:  MOVWF  78
....................   #else 
00F6:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
009B:  BTFSC  46.0
009C:  GOTO   09F
009D:  BCF    06.4
009E:  GOTO   0A0
009F:  BSF    06.4
00A0:  BSF    03.5
00A1:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00A2:  BCF    03.5
00A3:  BTFSC  46.1
00A4:  GOTO   0A7
00A5:  BCF    06.3
00A6:  GOTO   0A8
00A7:  BSF    06.3
00A8:  BSF    03.5
00A9:  BCF    06.3
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00AA:  BCF    03.5
00AB:  BTFSC  46.2
00AC:  GOTO   0AF
00AD:  BCF    06.2
00AE:  GOTO   0B0
00AF:  BSF    06.2
00B0:  BSF    03.5
00B1:  BCF    06.2
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00B2:  BCF    03.5
00B3:  BTFSC  46.3
00B4:  GOTO   0B7
00B5:  BCF    06.1
00B6:  GOTO   0B8
00B7:  BSF    06.1
00B8:  BSF    03.5
00B9:  BCF    06.1
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00BA:  NOP
....................    lcd_output_enable(1); 
00BB:  BCF    03.5
00BC:  BSF    06.5
00BD:  BSF    03.5
00BE:  BCF    06.5
....................    delay_us(2); 
00BF:  GOTO   0C0
....................    lcd_output_enable(0); 
00C0:  BCF    03.5
00C1:  BCF    06.5
00C2:  BSF    03.5
00C3:  BCF    06.5
00C4:  BCF    03.5
00C5:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00F7:  BSF    03.5
00F8:  BCF    06.5
....................    lcd_rs_tris(); 
00F9:  BCF    06.7
....................    lcd_rw_tris(); 
00FA:  BCF    06.6
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00FB:  BCF    03.5
00FC:  BCF    06.7
00FD:  BSF    03.5
00FE:  BCF    06.7
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
012D:  MOVF   78,W
012E:  MOVWF  45
012F:  BTFSS  45.7
0130:  GOTO   133
0131:  BSF    03.5
0132:  GOTO   0FF
....................    lcd_output_rs(address); 
0133:  MOVF   43,F
0134:  BTFSS  03.2
0135:  GOTO   138
0136:  BCF    06.7
0137:  GOTO   139
0138:  BSF    06.7
0139:  BSF    03.5
013A:  BCF    06.7
....................    delay_cycles(1); 
013B:  NOP
....................    lcd_output_rw(0); 
013C:  BCF    03.5
013D:  BCF    06.6
013E:  BSF    03.5
013F:  BCF    06.6
....................    delay_cycles(1); 
0140:  NOP
....................    lcd_output_enable(0); 
0141:  BCF    03.5
0142:  BCF    06.5
0143:  BSF    03.5
0144:  BCF    06.5
....................    lcd_send_nibble(n >> 4); 
0145:  BCF    03.5
0146:  SWAPF  44,W
0147:  MOVWF  45
0148:  MOVLW  0F
0149:  ANDWF  45,F
014A:  MOVF   45,W
014B:  MOVWF  46
014C:  CALL   09B
....................    lcd_send_nibble(n & 0xf); 
014D:  MOVF   44,W
014E:  ANDLW  0F
014F:  MOVWF  45
0150:  MOVWF  46
0151:  CALL   09B
0152:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0153:  MOVLW  28
0154:  MOVWF  3C
0155:  MOVLW  0C
0156:  MOVWF  3D
0157:  MOVLW  01
0158:  MOVWF  3E
0159:  MOVLW  06
015A:  MOVWF  3F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
015B:  BCF    06.5
015C:  BSF    03.5
015D:  BCF    06.5
....................    lcd_output_rs(0); 
015E:  BCF    03.5
015F:  BCF    06.7
0160:  BSF    03.5
0161:  BCF    06.7
....................    lcd_output_rw(0); 
0162:  BCF    03.5
0163:  BCF    06.6
0164:  BSF    03.5
0165:  BCF    06.6
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0166:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0167:  BCF    06.3
....................    output_drive(LCD_DATA6); 
0168:  BCF    06.2
....................    output_drive(LCD_DATA7); 
0169:  BCF    06.1
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
016A:  BCF    06.5
....................    lcd_rs_tris(); 
016B:  BCF    06.7
....................    lcd_rw_tris(); 
016C:  BCF    06.6
....................  #endif 
....................      
....................    delay_ms(15); 
016D:  MOVLW  0F
016E:  BCF    03.5
016F:  MOVWF  40
0170:  CALL   086
....................    for(i=1;i<=3;++i) 
0171:  MOVLW  01
0172:  MOVWF  3B
0173:  MOVF   3B,W
0174:  SUBLW  03
0175:  BTFSS  03.0
0176:  GOTO   17F
....................    { 
....................        lcd_send_nibble(3); 
0177:  MOVLW  03
0178:  MOVWF  46
0179:  CALL   09B
....................        delay_ms(5); 
017A:  MOVLW  05
017B:  MOVWF  40
017C:  CALL   086
017D:  INCF   3B,F
017E:  GOTO   173
....................    } 
....................     
....................    lcd_send_nibble(2); 
017F:  MOVLW  02
0180:  MOVWF  46
0181:  CALL   09B
....................    delay_ms(5); 
0182:  MOVLW  05
0183:  MOVWF  40
0184:  CALL   086
....................    for(i=0;i<=3;++i) 
0185:  CLRF   3B
0186:  MOVF   3B,W
0187:  SUBLW  03
0188:  BTFSS  03.0
0189:  GOTO   196
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
018A:  MOVLW  3C
018B:  ADDWF  3B,W
018C:  MOVWF  04
018D:  BCF    03.7
018E:  MOVF   00,W
018F:  MOVWF  40
0190:  CLRF   43
0191:  MOVF   40,W
0192:  MOVWF  44
0193:  CALL   0F7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0194:  INCF   3B,F
0195:  GOTO   186
0196:  BCF    0A.3
0197:  BCF    0A.4
0198:  GOTO   422 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0199:  DECFSZ 40,W
019A:  GOTO   19C
019B:  GOTO   19F
....................       address=LCD_LINE_TWO; 
019C:  MOVLW  40
019D:  MOVWF  41
019E:  GOTO   1A0
....................    else 
....................       address=0; 
019F:  CLRF   41
....................       
....................    address+=x-1; 
01A0:  MOVLW  01
01A1:  SUBWF  3F,W
01A2:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address); 
01A3:  MOVF   41,W
01A4:  IORLW  80
01A5:  MOVWF  42
01A6:  CLRF   43
01A7:  MOVF   42,W
01A8:  MOVWF  44
01A9:  CALL   0F7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01AA:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01AB:  MOVF   3E,W
01AC:  XORLW  07
01AD:  BTFSC  03.2
01AE:  GOTO   1B9
01AF:  XORLW  0B
01B0:  BTFSC  03.2
01B1:  GOTO   1BE
01B2:  XORLW  06
01B3:  BTFSC  03.2
01B4:  GOTO   1C6
01B5:  XORLW  02
01B6:  BTFSC  03.2
01B7:  GOTO   1CC
01B8:  GOTO   1D1
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01B9:  MOVLW  01
01BA:  MOVWF  3F
01BB:  MOVWF  40
01BC:  CALL   199
01BD:  GOTO   1D6
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01BE:  CLRF   43
01BF:  MOVLW  01
01C0:  MOVWF  44
01C1:  CALL   0F7
....................                      delay_ms(2); 
01C2:  MOVLW  02
01C3:  MOVWF  40
01C4:  CALL   086
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01C5:  GOTO   1D6
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01C6:  MOVLW  01
01C7:  MOVWF  3F
01C8:  MOVLW  02
01C9:  MOVWF  40
01CA:  CALL   199
01CB:  GOTO   1D6
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01CC:  CLRF   43
01CD:  MOVLW  10
01CE:  MOVWF  44
01CF:  CALL   0F7
01D0:  GOTO   1D6
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01D1:  MOVLW  01
01D2:  MOVWF  43
01D3:  MOVF   3E,W
01D4:  MOVWF  44
01D5:  CALL   0F7
....................      #endif 
....................    } 
01D6:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define buton pin_a0 
.................... #define sut1 pin_d0 
.................... #define sut2 pin_d1 
.................... #define sut3 pin_d2 
.................... #define sut4 pin_d3 
....................  
.................... #define sat1 pin_d4 
.................... #define sat2 pin_d5 
.................... #define sat3 pin_d6 
.................... #define sat4 pin_d7 
....................  
.................... #define ROLE pin_c1 
....................  
.................... int tus[4]={11,11,11,11}; 
*
0403:  MOVLW  0B
0404:  BCF    03.5
0405:  MOVWF  2B
0406:  MOVWF  2C
0407:  MOVWF  2D
0408:  MOVWF  2E
.................... int yanlis=0,sayac=0,flag=0,flag2=0,flag3=0,roleflag=0,taha=0; 
.................... int sifre[4] = {1, 9, 0, 3}; // Þifreyi burada tanýmlýyoruz 
0409:  MOVLW  01
040A:  MOVWF  36
040B:  MOVLW  09
040C:  MOVWF  37
040D:  CLRF   38
040E:  MOVLW  03
040F:  MOVWF  39
....................  
.................... void oku(int *tuss) 
*
022D:  CLRF   3D
.................... { 
....................    int breaker=0; 
....................    while(breaker<=3) 
022E:  MOVF   3D,W
022F:  SUBLW  03
0230:  BTFSS  03.0
0231:  GOTO   3CE
....................    { 
....................       if(roleflag==1) 
0232:  DECFSZ 34,W
0233:  GOTO   23B
....................       { 
....................          roleflag=0; output_low(ROLE); 
0234:  CLRF   34
0235:  BCF    3A.1
0236:  MOVF   3A,W
0237:  BSF    03.5
0238:  MOVWF  07
0239:  BCF    03.5
023A:  BCF    07.1
....................       } 
....................       if(input(buton)==1 && taha==0){ output_high(pin_c4);taha=1;} 
023B:  BSF    03.5
023C:  BSF    05.0
023D:  BCF    03.5
023E:  BTFSS  05.0
023F:  GOTO   24C
0240:  MOVF   35,F
0241:  BTFSS  03.2
0242:  GOTO   24C
0243:  BCF    3A.4
0244:  MOVF   3A,W
0245:  BSF    03.5
0246:  MOVWF  07
0247:  BCF    03.5
0248:  BSF    07.4
0249:  MOVLW  01
024A:  MOVWF  35
024B:  GOTO   253
....................       else {taha=0;output_low(pin_c4);} 
024C:  CLRF   35
024D:  BCF    3A.4
024E:  MOVF   3A,W
024F:  BSF    03.5
0250:  MOVWF  07
0251:  BCF    03.5
0252:  BCF    07.4
....................       output_high(sat1); 
0253:  BSF    03.5
0254:  BCF    08.4
0255:  BCF    03.5
0256:  BSF    08.4
....................       if(input(sut1)==1){while((input(sut1))); tuss[breaker]=1;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0257:  BSF    03.5
0258:  BSF    08.0
0259:  BCF    03.5
025A:  BTFSS  08.0
025B:  GOTO   274
025C:  BSF    03.5
025D:  BSF    08.0
025E:  BCF    03.5
025F:  BTFSC  08.0
0260:  GOTO   25C
0261:  MOVF   3D,W
0262:  ADDWF  3B,W
0263:  MOVWF  04
0264:  BCF    03.7
0265:  BTFSC  3C.0
0266:  BSF    03.7
0267:  MOVLW  01
0268:  MOVWF  00
0269:  MOVLW  07
026A:  ADDWF  3D,W
026B:  MOVWF  3E
026C:  MOVWF  3F
026D:  MOVLW  02
026E:  MOVWF  40
026F:  CALL   199
0270:  MOVLW  2A
0271:  MOVWF  3E
0272:  CALL   1AB
0273:  INCF   3D,F
....................       if(input(sut2)==1){while((input(sut2))); tuss[breaker]=2;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0274:  BSF    03.5
0275:  BSF    08.1
0276:  BCF    03.5
0277:  BTFSS  08.1
0278:  GOTO   291
0279:  BSF    03.5
027A:  BSF    08.1
027B:  BCF    03.5
027C:  BTFSC  08.1
027D:  GOTO   279
027E:  MOVF   3D,W
027F:  ADDWF  3B,W
0280:  MOVWF  04
0281:  BCF    03.7
0282:  BTFSC  3C.0
0283:  BSF    03.7
0284:  MOVLW  02
0285:  MOVWF  00
0286:  MOVLW  07
0287:  ADDWF  3D,W
0288:  MOVWF  3E
0289:  MOVWF  3F
028A:  MOVLW  02
028B:  MOVWF  40
028C:  CALL   199
028D:  MOVLW  2A
028E:  MOVWF  3E
028F:  CALL   1AB
0290:  INCF   3D,F
....................       if(input(sut3)==1){while((input(sut3))); tuss[breaker]=3;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0291:  BSF    03.5
0292:  BSF    08.2
0293:  BCF    03.5
0294:  BTFSS  08.2
0295:  GOTO   2AE
0296:  BSF    03.5
0297:  BSF    08.2
0298:  BCF    03.5
0299:  BTFSC  08.2
029A:  GOTO   296
029B:  MOVF   3D,W
029C:  ADDWF  3B,W
029D:  MOVWF  04
029E:  BCF    03.7
029F:  BTFSC  3C.0
02A0:  BSF    03.7
02A1:  MOVLW  03
02A2:  MOVWF  00
02A3:  MOVLW  07
02A4:  ADDWF  3D,W
02A5:  MOVWF  3E
02A6:  MOVWF  3F
02A7:  MOVLW  02
02A8:  MOVWF  40
02A9:  CALL   199
02AA:  MOVLW  2A
02AB:  MOVWF  3E
02AC:  CALL   1AB
02AD:  INCF   3D,F
....................       output_low(sat1); 
02AE:  BSF    03.5
02AF:  BCF    08.4
02B0:  BCF    03.5
02B1:  BCF    08.4
....................       output_high(sat2); 
02B2:  BSF    03.5
02B3:  BCF    08.5
02B4:  BCF    03.5
02B5:  BSF    08.5
....................       if(input(sut1)==1){while((input(sut1))); tuss[breaker]=4;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
02B6:  BSF    03.5
02B7:  BSF    08.0
02B8:  BCF    03.5
02B9:  BTFSS  08.0
02BA:  GOTO   2D3
02BB:  BSF    03.5
02BC:  BSF    08.0
02BD:  BCF    03.5
02BE:  BTFSC  08.0
02BF:  GOTO   2BB
02C0:  MOVF   3D,W
02C1:  ADDWF  3B,W
02C2:  MOVWF  04
02C3:  BCF    03.7
02C4:  BTFSC  3C.0
02C5:  BSF    03.7
02C6:  MOVLW  04
02C7:  MOVWF  00
02C8:  MOVLW  07
02C9:  ADDWF  3D,W
02CA:  MOVWF  3E
02CB:  MOVWF  3F
02CC:  MOVLW  02
02CD:  MOVWF  40
02CE:  CALL   199
02CF:  MOVLW  2A
02D0:  MOVWF  3E
02D1:  CALL   1AB
02D2:  INCF   3D,F
....................       if(input(sut2)==1){while((input(sut2))); tuss[breaker]=5;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
02D3:  BSF    03.5
02D4:  BSF    08.1
02D5:  BCF    03.5
02D6:  BTFSS  08.1
02D7:  GOTO   2F0
02D8:  BSF    03.5
02D9:  BSF    08.1
02DA:  BCF    03.5
02DB:  BTFSC  08.1
02DC:  GOTO   2D8
02DD:  MOVF   3D,W
02DE:  ADDWF  3B,W
02DF:  MOVWF  04
02E0:  BCF    03.7
02E1:  BTFSC  3C.0
02E2:  BSF    03.7
02E3:  MOVLW  05
02E4:  MOVWF  00
02E5:  MOVLW  07
02E6:  ADDWF  3D,W
02E7:  MOVWF  3E
02E8:  MOVWF  3F
02E9:  MOVLW  02
02EA:  MOVWF  40
02EB:  CALL   199
02EC:  MOVLW  2A
02ED:  MOVWF  3E
02EE:  CALL   1AB
02EF:  INCF   3D,F
....................       if(input(sut3)==1){while((input(sut3))); tuss[breaker]=6;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
02F0:  BSF    03.5
02F1:  BSF    08.2
02F2:  BCF    03.5
02F3:  BTFSS  08.2
02F4:  GOTO   30D
02F5:  BSF    03.5
02F6:  BSF    08.2
02F7:  BCF    03.5
02F8:  BTFSC  08.2
02F9:  GOTO   2F5
02FA:  MOVF   3D,W
02FB:  ADDWF  3B,W
02FC:  MOVWF  04
02FD:  BCF    03.7
02FE:  BTFSC  3C.0
02FF:  BSF    03.7
0300:  MOVLW  06
0301:  MOVWF  00
0302:  MOVLW  07
0303:  ADDWF  3D,W
0304:  MOVWF  3E
0305:  MOVWF  3F
0306:  MOVLW  02
0307:  MOVWF  40
0308:  CALL   199
0309:  MOVLW  2A
030A:  MOVWF  3E
030B:  CALL   1AB
030C:  INCF   3D,F
....................       output_low(sat2); 
030D:  BSF    03.5
030E:  BCF    08.5
030F:  BCF    03.5
0310:  BCF    08.5
....................       output_high(sat3); 
0311:  BSF    03.5
0312:  BCF    08.6
0313:  BCF    03.5
0314:  BSF    08.6
....................       if(input(sut1)==1){while((input(sut1))); tuss[breaker]=7;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0315:  BSF    03.5
0316:  BSF    08.0
0317:  BCF    03.5
0318:  BTFSS  08.0
0319:  GOTO   331
031A:  BSF    03.5
031B:  BSF    08.0
031C:  BCF    03.5
031D:  BTFSC  08.0
031E:  GOTO   31A
031F:  MOVF   3D,W
0320:  ADDWF  3B,W
0321:  MOVWF  04
0322:  BCF    03.7
0323:  BTFSC  3C.0
0324:  BSF    03.7
0325:  MOVLW  07
0326:  MOVWF  00
0327:  ADDWF  3D,W
0328:  MOVWF  3E
0329:  MOVWF  3F
032A:  MOVLW  02
032B:  MOVWF  40
032C:  CALL   199
032D:  MOVLW  2A
032E:  MOVWF  3E
032F:  CALL   1AB
0330:  INCF   3D,F
....................       if(input(sut2)==1){while((input(sut2))); tuss[breaker]=8;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0331:  BSF    03.5
0332:  BSF    08.1
0333:  BCF    03.5
0334:  BTFSS  08.1
0335:  GOTO   34E
0336:  BSF    03.5
0337:  BSF    08.1
0338:  BCF    03.5
0339:  BTFSC  08.1
033A:  GOTO   336
033B:  MOVF   3D,W
033C:  ADDWF  3B,W
033D:  MOVWF  04
033E:  BCF    03.7
033F:  BTFSC  3C.0
0340:  BSF    03.7
0341:  MOVLW  08
0342:  MOVWF  00
0343:  MOVLW  07
0344:  ADDWF  3D,W
0345:  MOVWF  3E
0346:  MOVWF  3F
0347:  MOVLW  02
0348:  MOVWF  40
0349:  CALL   199
034A:  MOVLW  2A
034B:  MOVWF  3E
034C:  CALL   1AB
034D:  INCF   3D,F
....................       if(input(sut3)==1){while((input(sut3))); tuss[breaker]=9;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
034E:  BSF    03.5
034F:  BSF    08.2
0350:  BCF    03.5
0351:  BTFSS  08.2
0352:  GOTO   36B
0353:  BSF    03.5
0354:  BSF    08.2
0355:  BCF    03.5
0356:  BTFSC  08.2
0357:  GOTO   353
0358:  MOVF   3D,W
0359:  ADDWF  3B,W
035A:  MOVWF  04
035B:  BCF    03.7
035C:  BTFSC  3C.0
035D:  BSF    03.7
035E:  MOVLW  09
035F:  MOVWF  00
0360:  MOVLW  07
0361:  ADDWF  3D,W
0362:  MOVWF  3E
0363:  MOVWF  3F
0364:  MOVLW  02
0365:  MOVWF  40
0366:  CALL   199
0367:  MOVLW  2A
0368:  MOVWF  3E
0369:  CALL   1AB
036A:  INCF   3D,F
....................       output_low(sat3); 
036B:  BSF    03.5
036C:  BCF    08.6
036D:  BCF    03.5
036E:  BCF    08.6
....................       output_high(sat4); 
036F:  BSF    03.5
0370:  BCF    08.7
0371:  BCF    03.5
0372:  BSF    08.7
....................       if(input(sut1)==1){while((input(sut1))); tuss[breaker]=12;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0373:  BSF    03.5
0374:  BSF    08.0
0375:  BCF    03.5
0376:  BTFSS  08.0
0377:  GOTO   390
0378:  BSF    03.5
0379:  BSF    08.0
037A:  BCF    03.5
037B:  BTFSC  08.0
037C:  GOTO   378
037D:  MOVF   3D,W
037E:  ADDWF  3B,W
037F:  MOVWF  04
0380:  BCF    03.7
0381:  BTFSC  3C.0
0382:  BSF    03.7
0383:  MOVLW  0C
0384:  MOVWF  00
0385:  MOVLW  07
0386:  ADDWF  3D,W
0387:  MOVWF  3E
0388:  MOVWF  3F
0389:  MOVLW  02
038A:  MOVWF  40
038B:  CALL   199
038C:  MOVLW  2A
038D:  MOVWF  3E
038E:  CALL   1AB
038F:  INCF   3D,F
....................       if(input(sut2)==1){while((input(sut2))); tuss[breaker]=0;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
0390:  BSF    03.5
0391:  BSF    08.1
0392:  BCF    03.5
0393:  BTFSS  08.1
0394:  GOTO   3AC
0395:  BSF    03.5
0396:  BSF    08.1
0397:  BCF    03.5
0398:  BTFSC  08.1
0399:  GOTO   395
039A:  MOVF   3D,W
039B:  ADDWF  3B,W
039C:  MOVWF  04
039D:  BCF    03.7
039E:  BTFSC  3C.0
039F:  BSF    03.7
03A0:  CLRF   00
03A1:  MOVLW  07
03A2:  ADDWF  3D,W
03A3:  MOVWF  3E
03A4:  MOVWF  3F
03A5:  MOVLW  02
03A6:  MOVWF  40
03A7:  CALL   199
03A8:  MOVLW  2A
03A9:  MOVWF  3E
03AA:  CALL   1AB
03AB:  INCF   3D,F
....................       if(input(sut3)==1){while((input(sut3))); tuss[breaker]=13;lcd_gotoxy(7+breaker,2);printf(lcd_putc,"*");breaker++;} 
03AC:  BSF    03.5
03AD:  BSF    08.2
03AE:  BCF    03.5
03AF:  BTFSS  08.2
03B0:  GOTO   3C9
03B1:  BSF    03.5
03B2:  BSF    08.2
03B3:  BCF    03.5
03B4:  BTFSC  08.2
03B5:  GOTO   3B1
03B6:  MOVF   3D,W
03B7:  ADDWF  3B,W
03B8:  MOVWF  04
03B9:  BCF    03.7
03BA:  BTFSC  3C.0
03BB:  BSF    03.7
03BC:  MOVLW  0D
03BD:  MOVWF  00
03BE:  MOVLW  07
03BF:  ADDWF  3D,W
03C0:  MOVWF  3E
03C1:  MOVWF  3F
03C2:  MOVLW  02
03C3:  MOVWF  40
03C4:  CALL   199
03C5:  MOVLW  2A
03C6:  MOVWF  3E
03C7:  CALL   1AB
03C8:  INCF   3D,F
....................       output_low(sat4); 
03C9:  BSF    03.5
03CA:  BCF    08.7
03CB:  BCF    03.5
03CC:  BCF    08.7
03CD:  GOTO   22E
....................    } 
....................    breaker=0; 
03CE:  CLRF   3D
03CF:  BCF    0A.3
03D0:  BCF    0A.4
03D1:  GOTO   43F (RETURN)
.................... } 
.................... int compare(void) 
.................... { 
....................    for(int i=0;i<4;i++) 
03D2:  CLRF   3B
03D3:  MOVF   3B,W
03D4:  SUBLW  03
03D5:  BTFSS  03.0
03D6:  GOTO   3EA
....................    { 
....................       if(tus[i]!=sifre[i])  
03D7:  MOVLW  2B
03D8:  ADDWF  3B,W
03D9:  MOVWF  04
03DA:  BCF    03.7
03DB:  MOVF   00,W
03DC:  MOVWF  3C
03DD:  MOVLW  36
03DE:  ADDWF  3B,W
03DF:  MOVWF  04
03E0:  BCF    03.7
03E1:  MOVF   00,W
03E2:  SUBWF  3C,W
03E3:  BTFSC  03.2
03E4:  GOTO   3E8
....................        
....................       return 0; 
03E5:  MOVLW  00
03E6:  MOVWF  78
03E7:  GOTO   3EC
03E8:  INCF   3B,F
03E9:  GOTO   3D3
....................    } 
....................    return 1; 
03EA:  MOVLW  01
03EB:  MOVWF  78
03EC:  BCF    0A.3
03ED:  BCF    0A.4
03EE:  GOTO   440 (RETURN)
.................... } 
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    sayac++; 
*
0051:  INCF   30,F
....................    if(sayac==10 && flag3==0) 
0052:  MOVF   30,W
0053:  SUBLW  0A
0054:  BTFSS  03.2
0055:  GOTO   060
0056:  MOVF   33,F
0057:  BTFSS  03.2
0058:  GOTO   060
....................    { 
....................       flag=0; 
0059:  CLRF   31
....................       sayac=0; 
005A:  CLRF   30
....................       flag2=1; 
005B:  MOVLW  01
005C:  MOVWF  32
....................       disable_interrupts(INT_TIMER1); 
005D:  BSF    03.5
005E:  BCF    0C.0
005F:  BCF    03.5
....................    } 
....................     
....................    if(flag3==1 && sayac==5) 
0060:  DECFSZ 33,W
0061:  GOTO   06E
0062:  MOVF   30,W
0063:  SUBLW  05
0064:  BTFSS  03.2
0065:  GOTO   06E
....................    { 
....................      sayac=0; 
0066:  CLRF   30
....................      flag3=0; 
0067:  CLRF   33
....................      roleflag=1; 
0068:  MOVLW  01
0069:  MOVWF  34
....................      flag=0; 
006A:  CLRF   31
....................      disable_interrupts(INT_TIMER1); 
006B:  BSF    03.5
006C:  BCF    0C.0
006D:  BCF    03.5
....................    } 
006E:  BCF    0C.0
006F:  BCF    0A.3
0070:  BCF    0A.4
0071:  GOTO   02D
.................... } 
....................  
.................... void main() 
*
03EF:  MOVF   03,W
03F0:  ANDLW  1F
03F1:  MOVWF  03
03F2:  CLRF   2F
03F3:  CLRF   30
03F4:  CLRF   31
03F5:  CLRF   32
03F6:  CLRF   33
03F7:  CLRF   34
03F8:  CLRF   35
03F9:  MOVLW  FF
03FA:  MOVWF  3A
03FB:  BSF    03.5
03FC:  BSF    1F.0
03FD:  BSF    1F.1
03FE:  BSF    1F.2
03FF:  BCF    1F.3
0400:  MOVLW  07
0401:  MOVWF  1C
0402:  BCF    03.7
.................... { 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);       
*
0410:  MOVLW  B5
0411:  MOVWF  10
....................    output_d(0x00); 
0412:  BSF    03.5
0413:  CLRF   08
0414:  BCF    03.5
0415:  CLRF   08
....................    enable_interrupts(GLOBAL); 
0416:  MOVLW  C0
0417:  IORWF  0B,F
....................     
....................    set_tris_d(0x00); 
0418:  MOVLW  00
0419:  BSF    03.5
041A:  MOVWF  08
....................    set_tris_c(0x00); 
041B:  MOVWF  07
041C:  BCF    03.5
041D:  MOVWF  3A
....................    set_tris_a(0x00); 
041E:  BSF    03.5
041F:  MOVWF  05
....................    lcd_init(); 
0420:  BCF    03.5
0421:  GOTO   153
....................   
....................    output_high(pin_c3); 
0422:  BCF    3A.3
0423:  MOVF   3A,W
0424:  BSF    03.5
0425:  MOVWF  07
0426:  BCF    03.5
0427:  BSF    07.3
....................     
....................    output_low(ROLE); 
0428:  BCF    3A.1
0429:  MOVF   3A,W
042A:  BSF    03.5
042B:  MOVWF  07
042C:  BCF    03.5
042D:  BCF    07.1
....................     
....................    while(TRUE) 
....................    { 
....................       if(flag!=1 && flag3!=1) 
042E:  DECFSZ 31,W
042F:  GOTO   431
0430:  GOTO   458
0431:  DECFSZ 33,W
0432:  GOTO   434
0433:  GOTO   458
....................       { 
....................           
....................          printf(lcd_putc,"\fParola Giriniz"); 
0434:  MOVLW  72
0435:  BSF    03.6
0436:  MOVWF  0D
0437:  MOVLW  00
0438:  MOVWF  0F
0439:  BCF    03.6
043A:  CALL   1D7
....................          oku(tus); 
043B:  CLRF   3C
043C:  MOVLW  2B
043D:  MOVWF  3B
043E:  GOTO   22D
....................          if(compare()!=1) 
043F:  GOTO   3D2
0440:  DECFSZ 78,W
0441:  GOTO   443
0442:  GOTO   445
....................          {yanlis++; 
0443:  INCF   2F,F
....................           
....................          } 
0444:  GOTO   458
....................          else  
....................          { 
....................             yanlis=0; 
0445:  CLRF   2F
....................             output_high(ROLE); 
0446:  BCF    3A.1
0447:  MOVF   3A,W
0448:  BSF    03.5
0449:  MOVWF  07
044A:  BCF    03.5
044B:  BSF    07.1
....................             printf(lcd_putc,"\fWELCOME"); 
044C:  MOVLW  7A
044D:  BSF    03.6
044E:  MOVWF  0D
044F:  MOVLW  00
0450:  MOVWF  0F
0451:  BCF    03.6
0452:  CALL   1D7
....................             flag3=1; 
0453:  MOVLW  01
0454:  MOVWF  33
....................             enable_interrupts(INT_TIMER1); 
0455:  BSF    03.5
0456:  BSF    0C.0
0457:  BCF    03.5
....................          } 
....................       } 
....................       if(yanlis==3) 
0458:  MOVF   2F,W
0459:  SUBLW  03
045A:  BTFSS  03.2
045B:  GOTO   469
....................       { 
....................          printf(lcd_putc,"\fKilitlendi!"); 
045C:  MOVLW  7F
045D:  BSF    03.6
045E:  MOVWF  0D
045F:  MOVLW  00
0460:  MOVWF  0F
0461:  BCF    03.6
0462:  CALL   1D7
....................          yanlis=0; 
0463:  CLRF   2F
....................          enable_interrupts(INT_TIMER1); 
0464:  BSF    03.5
0465:  BSF    0C.0
....................          flag=1; 
0466:  MOVLW  01
0467:  BCF    03.5
0468:  MOVWF  31
....................       } 
0469:  GOTO   42E
....................    } 
.................... } 
....................        
046A:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
