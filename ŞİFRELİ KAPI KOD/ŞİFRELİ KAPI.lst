CCS PCM C Compiler, Version 5.015, 5967               21-May-24 02:39

               Filename:   C:\Users\Taha\Desktop\OKUL BELGELER\CCS C ÇALIÞMALAR\ÞÝFRELÝ KAPI KÝLÝDÝ UYGULAMASI\ÞÝFRELÝ KAPI KOD\ÞÝFRELÝ KAPI.lst

               ROM used:   995 words (12%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           30 (8%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2FE
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,2A
0005:  DATA 61,34
0006:  DATA 61,10
0007:  DATA CB,30
0008:  DATA F2,30
0009:  DATA 00,00
000A:  DATA 0A,19
000B:  DATA 30,19
000C:  DATA 30,19
000D:  DATA B3,1B
000E:  DATA B0,1B
000F:  DATA B0,18
0010:  DATA 38,00
0011:  DATA 8C,25
0012:  DATA 69,36
0013:  DATA 69,3A
0014:  DATA EC,34
0015:  DATA 00,01
0016:  DATA 0A,21
0017:  DATA C1,2A
0018:  DATA 4E,10
0019:  DATA C5,22
001A:  DATA 4D,00
001B:  DATA 0C,28
001C:  DATA 61,39
001D:  DATA 6F,36
001E:  DATA 61,10
001F:  DATA C7,34
0020:  DATA F2,34
0021:  DATA EE,34
0022:  DATA 7A,00
0023:  DATA 8C,25
0024:  DATA 69,36
0025:  DATA 69,3A
0026:  DATA EC,32
0027:  DATA 6E,32
0028:  DATA E9,10
0029:  DATA 00,01
002A:  DATA 0C,28
002B:  DATA 61,39
002C:  DATA 6F,36
002D:  DATA 61,10
002E:  DATA C7,34
002F:  DATA F2,34
0030:  DATA EE,34
0031:  DATA 7A,00
0032:  DATA 8C,2B
0033:  DATA 45,26
0034:  DATA C3,27
0035:  DATA CD,22
0036:  DATA 00,01
0037:  DATA 0C,28
0038:  DATA 61,39
0039:  DATA 6F,36
003A:  DATA 61,10
003B:  DATA C7,34
003C:  DATA F2,34
003D:  DATA EE,34
003E:  DATA 7A,00
003F:  DATA 0C,28
0040:  DATA 61,39
0041:  DATA 6F,36
0042:  DATA 61,10
0043:  DATA C8,30
0044:  DATA F4,30
0045:  DATA EC,34
0046:  DATA 00,01
0047:  DATA 0C,28
0048:  DATA 61,39
0049:  DATA 6F,36
004A:  DATA 61,10
004B:  DATA C7,34
004C:  DATA F2,34
004D:  DATA EE,34
004E:  DATA 7A,00
*
01A0:  MOVF   0B,W
01A1:  MOVWF  2B
01A2:  BCF    0B.7
01A3:  BSF    03.5
01A4:  BSF    03.6
01A5:  BSF    0C.7
01A6:  BSF    0C.0
01A7:  NOP
01A8:  NOP
01A9:  BCF    03.5
01AA:  BCF    03.6
01AB:  BTFSC  2B.7
01AC:  BSF    0B.7
01AD:  BSF    03.6
01AE:  MOVF   0C,W
01AF:  ANDLW  7F
01B0:  BTFSC  03.2
01B1:  GOTO   1F4
01B2:  BCF    03.6
01B3:  MOVWF  2B
01B4:  BSF    03.6
01B5:  MOVF   0D,W
01B6:  BCF    03.6
01B7:  MOVWF  2C
01B8:  BSF    03.6
01B9:  MOVF   0F,W
01BA:  BCF    03.6
01BB:  MOVWF  2D
01BC:  MOVF   2B,W
01BD:  MOVWF  2E
01BE:  CALL   174
01BF:  MOVF   2C,W
01C0:  BSF    03.6
01C1:  MOVWF  0D
01C2:  BCF    03.6
01C3:  MOVF   2D,W
01C4:  BSF    03.6
01C5:  MOVWF  0F
01C6:  BCF    03.6
01C7:  MOVF   0B,W
01C8:  MOVWF  2E
01C9:  BCF    0B.7
01CA:  BSF    03.5
01CB:  BSF    03.6
01CC:  BSF    0C.7
01CD:  BSF    0C.0
01CE:  NOP
01CF:  NOP
01D0:  BCF    03.5
01D1:  BCF    03.6
01D2:  BTFSC  2E.7
01D3:  BSF    0B.7
01D4:  BSF    03.6
01D5:  RLF    0C,W
01D6:  RLF    0E,W
01D7:  ANDLW  7F
01D8:  BTFSC  03.2
01D9:  GOTO   1F4
01DA:  BCF    03.6
01DB:  MOVWF  2B
01DC:  BSF    03.6
01DD:  MOVF   0D,W
01DE:  BCF    03.6
01DF:  MOVWF  2C
01E0:  BSF    03.6
01E1:  MOVF   0F,W
01E2:  BCF    03.6
01E3:  MOVWF  2D
01E4:  MOVF   2B,W
01E5:  MOVWF  2E
01E6:  CALL   174
01E7:  MOVF   2C,W
01E8:  BSF    03.6
01E9:  MOVWF  0D
01EA:  BCF    03.6
01EB:  MOVF   2D,W
01EC:  BSF    03.6
01ED:  MOVWF  0F
01EE:  INCF   0D,F
01EF:  BTFSC  03.2
01F0:  INCF   0F,F
01F1:  BCF    03.6
01F2:  GOTO   1A0
01F3:  BSF    03.6
01F4:  BCF    03.6
01F5:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #fuses NOWDT 
.................... #fuses NOBROWNOUT 
.................... #fuses NOLVP 
....................  
.................... #use delay(crystal=4000000) 
*
004F:  MOVLW  30
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  BTFSC  03.2
0054:  GOTO   063
0055:  MOVLW  01
0056:  MOVWF  78
0057:  CLRF   77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  DECFSZ 78,F
005B:  GOTO   057
005C:  MOVLW  4A
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  GOTO   061
0061:  DECFSZ 00,F
0062:  GOTO   055
0063:  RETURN
....................  
.................... #define LCD_RS_PIN PIN_B7 
.................... #define LCD_RW_PIN PIN_B6 
.................... #define LCD_ENABLE_PIN PIN_B5 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B3 
.................... #define LCD_DATA6 PIN_B2 
.................... #define LCD_DATA7 PIN_B1 
....................  
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C8:  BSF    06.4
....................    output_float(LCD_DATA5); 
00C9:  BSF    06.3
....................    output_float(LCD_DATA6); 
00CA:  BSF    06.2
....................    output_float(LCD_DATA7); 
00CB:  BSF    06.1
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00CC:  BCF    03.5
00CD:  BSF    06.6
00CE:  BSF    03.5
00CF:  BCF    06.6
....................    delay_cycles(1); 
00D0:  NOP
....................    lcd_output_enable(1); 
00D1:  BCF    03.5
00D2:  BSF    06.5
00D3:  BSF    03.5
00D4:  BCF    06.5
....................    delay_cycles(1); 
00D5:  NOP
....................    high = lcd_read_nibble(); 
00D6:  BCF    03.5
00D7:  CALL   08F
00D8:  MOVF   78,W
00D9:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
00DA:  BCF    06.5
00DB:  BSF    03.5
00DC:  BCF    06.5
....................    delay_cycles(1); 
00DD:  NOP
....................    lcd_output_enable(1); 
00DE:  BCF    03.5
00DF:  BSF    06.5
00E0:  BSF    03.5
00E1:  BCF    06.5
....................    delay_us(1); 
00E2:  NOP
....................    low = lcd_read_nibble(); 
00E3:  BCF    03.5
00E4:  CALL   08F
00E5:  MOVF   78,W
00E6:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00E7:  BCF    06.5
00E8:  BSF    03.5
00E9:  BCF    06.5
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00EA:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00EB:  BCF    06.3
....................    output_drive(LCD_DATA6); 
00EC:  BCF    06.2
....................    output_drive(LCD_DATA7); 
00ED:  BCF    06.1
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00EE:  BCF    03.5
00EF:  SWAPF  36,W
00F0:  MOVWF  77
00F1:  MOVLW  F0
00F2:  ANDWF  77,F
00F3:  MOVF   77,W
00F4:  IORWF  35,W
00F5:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
008F:  CLRF   37
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0090:  BSF    03.5
0091:  BSF    06.4
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  06.4
0095:  MOVLW  01
0096:  IORWF  37,F
....................    n |= input(LCD_DATA5) << 1; 
0097:  BSF    03.5
0098:  BSF    06.3
0099:  MOVLW  00
009A:  BCF    03.5
009B:  BTFSC  06.3
009C:  MOVLW  01
009D:  MOVWF  77
009E:  BCF    03.0
009F:  RLF    77,F
00A0:  MOVF   77,W
00A1:  IORWF  37,F
....................    n |= input(LCD_DATA6) << 2; 
00A2:  BSF    03.5
00A3:  BSF    06.2
00A4:  MOVLW  00
00A5:  BCF    03.5
00A6:  BTFSC  06.2
00A7:  MOVLW  01
00A8:  MOVWF  77
00A9:  RLF    77,F
00AA:  RLF    77,F
00AB:  MOVLW  FC
00AC:  ANDWF  77,F
00AD:  MOVF   77,W
00AE:  IORWF  37,F
....................    n |= input(LCD_DATA7) << 3; 
00AF:  BSF    03.5
00B0:  BSF    06.1
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  06.1
00B4:  MOVLW  01
00B5:  MOVWF  77
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  RLF    77,F
00B9:  MOVLW  F8
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  37,F
....................     
....................    return(n); 
00BD:  MOVF   37,W
00BE:  MOVWF  78
....................   #else 
00BF:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0064:  BTFSC  36.0
0065:  GOTO   068
0066:  BCF    06.4
0067:  GOTO   069
0068:  BSF    06.4
0069:  BSF    03.5
006A:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
006B:  BCF    03.5
006C:  BTFSC  36.1
006D:  GOTO   070
006E:  BCF    06.3
006F:  GOTO   071
0070:  BSF    06.3
0071:  BSF    03.5
0072:  BCF    06.3
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0073:  BCF    03.5
0074:  BTFSC  36.2
0075:  GOTO   078
0076:  BCF    06.2
0077:  GOTO   079
0078:  BSF    06.2
0079:  BSF    03.5
007A:  BCF    06.2
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
007B:  BCF    03.5
007C:  BTFSC  36.3
007D:  GOTO   080
007E:  BCF    06.1
007F:  GOTO   081
0080:  BSF    06.1
0081:  BSF    03.5
0082:  BCF    06.1
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_enable(1); 
0084:  BCF    03.5
0085:  BSF    06.5
0086:  BSF    03.5
0087:  BCF    06.5
....................    delay_us(2); 
0088:  GOTO   089
....................    lcd_output_enable(0); 
0089:  BCF    03.5
008A:  BCF    06.5
008B:  BSF    03.5
008C:  BCF    06.5
008D:  BCF    03.5
008E:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00C0:  BSF    03.5
00C1:  BCF    06.5
....................    lcd_rs_tris(); 
00C2:  BCF    06.7
....................    lcd_rw_tris(); 
00C3:  BCF    06.6
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00C4:  BCF    03.5
00C5:  BCF    06.7
00C6:  BSF    03.5
00C7:  BCF    06.7
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F6:  MOVF   78,W
00F7:  MOVWF  35
00F8:  BTFSS  35.7
00F9:  GOTO   0FC
00FA:  BSF    03.5
00FB:  GOTO   0C8
....................    lcd_output_rs(address); 
00FC:  MOVF   33,F
00FD:  BTFSS  03.2
00FE:  GOTO   101
00FF:  BCF    06.7
0100:  GOTO   102
0101:  BSF    06.7
0102:  BSF    03.5
0103:  BCF    06.7
....................    delay_cycles(1); 
0104:  NOP
....................    lcd_output_rw(0); 
0105:  BCF    03.5
0106:  BCF    06.6
0107:  BSF    03.5
0108:  BCF    06.6
....................    delay_cycles(1); 
0109:  NOP
....................    lcd_output_enable(0); 
010A:  BCF    03.5
010B:  BCF    06.5
010C:  BSF    03.5
010D:  BCF    06.5
....................    lcd_send_nibble(n >> 4); 
010E:  BCF    03.5
010F:  SWAPF  34,W
0110:  MOVWF  35
0111:  MOVLW  0F
0112:  ANDWF  35,F
0113:  MOVF   35,W
0114:  MOVWF  36
0115:  CALL   064
....................    lcd_send_nibble(n & 0xf); 
0116:  MOVF   34,W
0117:  ANDLW  0F
0118:  MOVWF  35
0119:  MOVWF  36
011A:  CALL   064
011B:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
011C:  MOVLW  28
011D:  MOVWF  2C
011E:  MOVLW  0C
011F:  MOVWF  2D
0120:  MOVLW  01
0121:  MOVWF  2E
0122:  MOVLW  06
0123:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0124:  BCF    06.5
0125:  BSF    03.5
0126:  BCF    06.5
....................    lcd_output_rs(0); 
0127:  BCF    03.5
0128:  BCF    06.7
0129:  BSF    03.5
012A:  BCF    06.7
....................    lcd_output_rw(0); 
012B:  BCF    03.5
012C:  BCF    06.6
012D:  BSF    03.5
012E:  BCF    06.6
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
012F:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0130:  BCF    06.3
....................    output_drive(LCD_DATA6); 
0131:  BCF    06.2
....................    output_drive(LCD_DATA7); 
0132:  BCF    06.1
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0133:  BCF    06.5
....................    lcd_rs_tris(); 
0134:  BCF    06.7
....................    lcd_rw_tris(); 
0135:  BCF    06.6
....................  #endif 
....................      
....................    delay_ms(15); 
0136:  MOVLW  0F
0137:  BCF    03.5
0138:  MOVWF  30
0139:  CALL   04F
....................    for(i=1;i<=3;++i) 
013A:  MOVLW  01
013B:  MOVWF  2B
013C:  MOVF   2B,W
013D:  SUBLW  03
013E:  BTFSS  03.0
013F:  GOTO   148
....................    { 
....................        lcd_send_nibble(3); 
0140:  MOVLW  03
0141:  MOVWF  36
0142:  CALL   064
....................        delay_ms(5); 
0143:  MOVLW  05
0144:  MOVWF  30
0145:  CALL   04F
0146:  INCF   2B,F
0147:  GOTO   13C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0148:  MOVLW  02
0149:  MOVWF  36
014A:  CALL   064
....................    delay_ms(5); 
014B:  MOVLW  05
014C:  MOVWF  30
014D:  CALL   04F
....................    for(i=0;i<=3;++i) 
014E:  CLRF   2B
014F:  MOVF   2B,W
0150:  SUBLW  03
0151:  BTFSS  03.0
0152:  GOTO   15F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0153:  MOVLW  2C
0154:  ADDWF  2B,W
0155:  MOVWF  04
0156:  BCF    03.7
0157:  MOVF   00,W
0158:  MOVWF  30
0159:  CLRF   33
015A:  MOVF   30,W
015B:  MOVWF  34
015C:  CALL   0C0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
015D:  INCF   2B,F
015E:  GOTO   14F
015F:  BCF    0A.3
0160:  BCF    0A.4
0161:  GOTO   329 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0162:  DECFSZ 30,W
0163:  GOTO   165
0164:  GOTO   168
....................       address=LCD_LINE_TWO; 
0165:  MOVLW  40
0166:  MOVWF  31
0167:  GOTO   169
....................    else 
....................       address=0; 
0168:  CLRF   31
....................       
....................    address+=x-1; 
0169:  MOVLW  01
016A:  SUBWF  2F,W
016B:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
016C:  MOVF   31,W
016D:  IORLW  80
016E:  MOVWF  32
016F:  CLRF   33
0170:  MOVF   32,W
0171:  MOVWF  34
0172:  CALL   0C0
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0173:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0174:  MOVF   2E,W
0175:  XORLW  07
0176:  BTFSC  03.2
0177:  GOTO   182
0178:  XORLW  0B
0179:  BTFSC  03.2
017A:  GOTO   187
017B:  XORLW  06
017C:  BTFSC  03.2
017D:  GOTO   18F
017E:  XORLW  02
017F:  BTFSC  03.2
0180:  GOTO   195
0181:  GOTO   19A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0182:  MOVLW  01
0183:  MOVWF  2F
0184:  MOVWF  30
0185:  CALL   162
0186:  GOTO   19F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0187:  CLRF   33
0188:  MOVLW  01
0189:  MOVWF  34
018A:  CALL   0C0
....................                      delay_ms(2); 
018B:  MOVLW  02
018C:  MOVWF  30
018D:  CALL   04F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
018E:  GOTO   19F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
018F:  MOVLW  01
0190:  MOVWF  2F
0191:  MOVLW  02
0192:  MOVWF  30
0193:  CALL   162
0194:  GOTO   19F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0195:  CLRF   33
0196:  MOVLW  10
0197:  MOVWF  34
0198:  CALL   0C0
0199:  GOTO   19F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
019A:  MOVLW  01
019B:  MOVWF  33
019C:  MOVF   2E,W
019D:  MOVWF  34
019E:  CALL   0C0
....................      #endif 
....................    } 
019F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #define sut1 pin_d0 
.................... #define sut2 pin_d1 
.................... #define sut3 pin_d2 
.................... #define sut4 pin_d3 
....................  
.................... #define sat1 pin_d4 
.................... #define sat2 pin_d5 
.................... #define sat3 pin_d6 
.................... #define sat4 pin_d7 
....................  
.................... #define ROLE pin_c0 
....................  
.................... int tus=0; 
.................... int basildi; 
.................... int sifre[4] = {1, 9, 0, 3}; // Þifreyi burada tanýmlýyoruz 
*
030C:  MOVLW  01
030D:  BCF    03.5
030E:  MOVWF  22
030F:  MOVLW  09
0310:  MOVWF  23
0311:  CLRF   24
0312:  MOVLW  03
0313:  MOVWF  25
....................  
.................... int keypad_oku() 
.................... { 
....................   output_d(0x00); 
*
01F6:  BSF    03.5
01F7:  CLRF   08
01F8:  BCF    03.5
01F9:  CLRF   08
....................   tus = 0; 
01FA:  CLRF   20
....................    
....................   output_high(sat1); // SATIR 1 
01FB:  BSF    03.5
01FC:  BCF    08.4
01FD:  BCF    03.5
01FE:  BSF    08.4
....................    
....................   if (input(sut1)) 
01FF:  BSF    03.5
0200:  BSF    08.0
0201:  BCF    03.5
0202:  BTFSS  08.0
0203:  GOTO   20C
....................   { while(input(sut1)); 
0204:  BSF    03.5
0205:  BSF    08.0
0206:  BCF    03.5
0207:  BTFSC  08.0
0208:  GOTO   204
....................   tus=1;  
0209:  MOVLW  01
020A:  MOVWF  20
....................   basildi=1; } 
020B:  MOVWF  21
....................    
....................   if (input(sut2)) 
020C:  BSF    03.5
020D:  BSF    08.1
020E:  BCF    03.5
020F:  BTFSS  08.1
0210:  GOTO   21A
....................   { while(input(sut2));  
0211:  BSF    03.5
0212:  BSF    08.1
0213:  BCF    03.5
0214:  BTFSC  08.1
0215:  GOTO   211
....................   tus=2; 
0216:  MOVLW  02
0217:  MOVWF  20
....................   basildi=1; } 
0218:  MOVLW  01
0219:  MOVWF  21
....................    
....................   if (input(sut3)) 
021A:  BSF    03.5
021B:  BSF    08.2
021C:  BCF    03.5
021D:  BTFSS  08.2
021E:  GOTO   228
....................   { while(input(sut3));  
021F:  BSF    03.5
0220:  BSF    08.2
0221:  BCF    03.5
0222:  BTFSC  08.2
0223:  GOTO   21F
....................   tus=3;  
0224:  MOVLW  03
0225:  MOVWF  20
....................   basildi=1; } 
0226:  MOVLW  01
0227:  MOVWF  21
....................    
....................   if (input(sut4)) 
0228:  BSF    03.5
0229:  BSF    08.3
022A:  BCF    03.5
022B:  BTFSS  08.3
022C:  GOTO   236
....................   {  while(input(sut4));   
022D:  BSF    03.5
022E:  BSF    08.3
022F:  BCF    03.5
0230:  BTFSC  08.3
0231:  GOTO   22D
....................   tus=0xA;  
0232:  MOVLW  0A
0233:  MOVWF  20
....................   basildi=1; } 
0234:  MOVLW  01
0235:  MOVWF  21
....................    output_low(sat1); 
0236:  BSF    03.5
0237:  BCF    08.4
0238:  BCF    03.5
0239:  BCF    08.4
....................     
....................     
....................     
....................    output_high(sat2); // SATIR 2 
023A:  BSF    03.5
023B:  BCF    08.5
023C:  BCF    03.5
023D:  BSF    08.5
....................     
....................    if (input(sut1)) 
023E:  BSF    03.5
023F:  BSF    08.0
0240:  BCF    03.5
0241:  BTFSS  08.0
0242:  GOTO   24C
....................   {  while(input(sut1));   
0243:  BSF    03.5
0244:  BSF    08.0
0245:  BCF    03.5
0246:  BTFSC  08.0
0247:  GOTO   243
....................   tus=4;  
0248:  MOVLW  04
0249:  MOVWF  20
....................   basildi=1; } 
024A:  MOVLW  01
024B:  MOVWF  21
....................    
....................   if (input(sut2)) 
024C:  BSF    03.5
024D:  BSF    08.1
024E:  BCF    03.5
024F:  BTFSS  08.1
0250:  GOTO   25A
....................   {  while(input(sut2));   
0251:  BSF    03.5
0252:  BSF    08.1
0253:  BCF    03.5
0254:  BTFSC  08.1
0255:  GOTO   251
....................   tus=5;  
0256:  MOVLW  05
0257:  MOVWF  20
....................   basildi=1; } 
0258:  MOVLW  01
0259:  MOVWF  21
....................    
....................   if (input(sut3)) 
025A:  BSF    03.5
025B:  BSF    08.2
025C:  BCF    03.5
025D:  BTFSS  08.2
025E:  GOTO   268
....................   {  while(input(sut3));  
025F:  BSF    03.5
0260:  BSF    08.2
0261:  BCF    03.5
0262:  BTFSC  08.2
0263:  GOTO   25F
....................   tus=6;  
0264:  MOVLW  06
0265:  MOVWF  20
....................   basildi=1; } 
0266:  MOVLW  01
0267:  MOVWF  21
....................    
....................   if (input(sut4)) 
0268:  BSF    03.5
0269:  BSF    08.3
026A:  BCF    03.5
026B:  BTFSS  08.3
026C:  GOTO   276
....................   {  while(input(sut4));  
026D:  BSF    03.5
026E:  BSF    08.3
026F:  BCF    03.5
0270:  BTFSC  08.3
0271:  GOTO   26D
....................   tus=0xB;  
0272:  MOVLW  0B
0273:  MOVWF  20
....................   basildi=1; } 
0274:  MOVLW  01
0275:  MOVWF  21
....................    output_low(sat2); 
0276:  BSF    03.5
0277:  BCF    08.5
0278:  BCF    03.5
0279:  BCF    08.5
....................     
....................     
....................     
....................    output_high(sat3); // SATIR 3 
027A:  BSF    03.5
027B:  BCF    08.6
027C:  BCF    03.5
027D:  BSF    08.6
....................     
....................    if (input(sut1)) 
027E:  BSF    03.5
027F:  BSF    08.0
0280:  BCF    03.5
0281:  BTFSS  08.0
0282:  GOTO   28C
....................   {  while(input(sut1));  
0283:  BSF    03.5
0284:  BSF    08.0
0285:  BCF    03.5
0286:  BTFSC  08.0
0287:  GOTO   283
....................   tus=7;  
0288:  MOVLW  07
0289:  MOVWF  20
....................   basildi=1; } 
028A:  MOVLW  01
028B:  MOVWF  21
....................    
....................   if (input(sut2)) 
028C:  BSF    03.5
028D:  BSF    08.1
028E:  BCF    03.5
028F:  BTFSS  08.1
0290:  GOTO   29A
....................   {  while(input(sut2));   
0291:  BSF    03.5
0292:  BSF    08.1
0293:  BCF    03.5
0294:  BTFSC  08.1
0295:  GOTO   291
....................   tus=8;  
0296:  MOVLW  08
0297:  MOVWF  20
....................   basildi=1; } 
0298:  MOVLW  01
0299:  MOVWF  21
....................    
....................   if (input(sut3)) 
029A:  BSF    03.5
029B:  BSF    08.2
029C:  BCF    03.5
029D:  BTFSS  08.2
029E:  GOTO   2A8
....................   {  while(input(sut3));   
029F:  BSF    03.5
02A0:  BSF    08.2
02A1:  BCF    03.5
02A2:  BTFSC  08.2
02A3:  GOTO   29F
....................   tus=9;  
02A4:  MOVLW  09
02A5:  MOVWF  20
....................   basildi=1; } 
02A6:  MOVLW  01
02A7:  MOVWF  21
....................    
....................   if (input(sut4)) 
02A8:  BSF    03.5
02A9:  BSF    08.3
02AA:  BCF    03.5
02AB:  BTFSS  08.3
02AC:  GOTO   2B6
....................   {  while(input(sut4));  
02AD:  BSF    03.5
02AE:  BSF    08.3
02AF:  BCF    03.5
02B0:  BTFSC  08.3
02B1:  GOTO   2AD
....................   tus=0x0C;  
02B2:  MOVLW  0C
02B3:  MOVWF  20
....................   basildi=1; } 
02B4:  MOVLW  01
02B5:  MOVWF  21
....................    output_low(sat3); 
02B6:  BSF    03.5
02B7:  BCF    08.6
02B8:  BCF    03.5
02B9:  BCF    08.6
....................     
....................     
....................     
....................    output_high(sat4); // SATIR 4 
02BA:  BSF    03.5
02BB:  BCF    08.7
02BC:  BCF    03.5
02BD:  BSF    08.7
....................     
....................    if (input(sut1)) 
02BE:  BSF    03.5
02BF:  BSF    08.0
02C0:  BCF    03.5
02C1:  BTFSS  08.0
02C2:  GOTO   2CC
....................   {  while(input(sut1));   
02C3:  BSF    03.5
02C4:  BSF    08.0
02C5:  BCF    03.5
02C6:  BTFSC  08.0
02C7:  GOTO   2C3
....................   tus=0xE;  
02C8:  MOVLW  0E
02C9:  MOVWF  20
....................   basildi=1; } 
02CA:  MOVLW  01
02CB:  MOVWF  21
....................    
....................   if (input(sut2)) 
02CC:  BSF    03.5
02CD:  BSF    08.1
02CE:  BCF    03.5
02CF:  BTFSS  08.1
02D0:  GOTO   2D9
....................   {  while(input(sut2));   
02D1:  BSF    03.5
02D2:  BSF    08.1
02D3:  BCF    03.5
02D4:  BTFSC  08.1
02D5:  GOTO   2D1
....................   tus=0;  
02D6:  CLRF   20
....................   basildi=1; } 
02D7:  MOVLW  01
02D8:  MOVWF  21
....................    
....................   if (input(sut3)) 
02D9:  BSF    03.5
02DA:  BSF    08.2
02DB:  BCF    03.5
02DC:  BTFSS  08.2
02DD:  GOTO   2E7
....................   {  while(input(sut3));  
02DE:  BSF    03.5
02DF:  BSF    08.2
02E0:  BCF    03.5
02E1:  BTFSC  08.2
02E2:  GOTO   2DE
....................   tus=0xF;  
02E3:  MOVLW  0F
02E4:  MOVWF  20
....................   basildi=1; } 
02E5:  MOVLW  01
02E6:  MOVWF  21
....................    
....................   if (input(sut4)) 
02E7:  BSF    03.5
02E8:  BSF    08.3
02E9:  BCF    03.5
02EA:  BTFSS  08.3
02EB:  GOTO   2F5
....................   {  while(input(sut4));  
02EC:  BSF    03.5
02ED:  BSF    08.3
02EE:  BCF    03.5
02EF:  BTFSC  08.3
02F0:  GOTO   2EC
....................   tus=0xD;  
02F1:  MOVLW  0D
02F2:  MOVWF  20
....................   basildi=1; } 
02F3:  MOVLW  01
02F4:  MOVWF  21
....................    output_low(sat4); 
02F5:  BSF    03.5
02F6:  BCF    08.7
02F7:  BCF    03.5
02F8:  BCF    08.7
....................     
....................    return tus; 
02F9:  MOVF   20,W
02FA:  MOVWF  78
02FB:  BCF    0A.3
02FC:  BCF    0A.4
02FD:  GOTO   35E (RETURN)
.................... } 
....................  
....................  
.................... void main() 
02FE:  MOVF   03,W
02FF:  ANDLW  1F
0300:  MOVWF  03
0301:  CLRF   20
0302:  MOVLW  FF
0303:  MOVWF  26
0304:  BSF    03.5
0305:  BSF    1F.0
0306:  BSF    1F.1
0307:  BSF    1F.2
0308:  BCF    1F.3
0309:  MOVLW  07
030A:  MOVWF  1C
030B:  BCF    03.7
.................... { 
....................   setup_psp(PSP_DISABLED); 
*
0314:  BSF    03.5
0315:  BCF    09.4
....................   setup_timer_1(T1_DISABLED); 
0316:  BCF    03.5
0317:  CLRF   10
....................   setup_timer_2(T2_DISABLED,0,1); 
0318:  MOVLW  00
0319:  MOVWF  78
031A:  MOVWF  12
031B:  MOVLW  00
031C:  BSF    03.5
031D:  MOVWF  12
....................   setup_adc_ports(NO_ANALOGS); 
031E:  BSF    1F.0
031F:  BSF    1F.1
0320:  BSF    1F.2
0321:  BCF    1F.3
....................   setup_adc(ADC_OFF); 
0322:  BCF    03.5
0323:  BCF    1F.0
....................    
....................   set_tris_d(0x0F); 
0324:  MOVLW  0F
0325:  BSF    03.5
0326:  MOVWF  08
....................    
....................   lcd_init(); 
0327:  BCF    03.5
0328:  GOTO   11C
....................    
....................   printf(lcd_putc,"\fTaha Kara"); 
0329:  MOVLW  04
032A:  BSF    03.6
032B:  MOVWF  0D
032C:  MOVLW  00
032D:  MOVWF  0F
032E:  BCF    03.6
032F:  CALL   1A0
....................   printf(lcd_putc,"\n202023707018"); 
0330:  MOVLW  0A
0331:  BSF    03.6
0332:  MOVWF  0D
0333:  MOVLW  00
0334:  MOVWF  0F
0335:  BCF    03.6
0336:  CALL   1A0
....................   delay_ms(1500); 
0337:  MOVLW  06
0338:  MOVWF  2B
0339:  MOVLW  FA
033A:  MOVWF  30
033B:  CALL   04F
033C:  DECFSZ 2B,F
033D:  GOTO   339
....................   printf(lcd_putc,"\fKilitli"); 
033E:  MOVLW  11
033F:  BSF    03.6
0340:  MOVWF  0D
0341:  MOVLW  00
0342:  MOVWF  0F
0343:  BCF    03.6
0344:  CALL   1A0
....................   printf(lcd_putc,"\nBAUN EEM"); 
0345:  MOVLW  16
0346:  BSF    03.6
0347:  MOVWF  0D
0348:  MOVLW  00
0349:  MOVWF  0F
034A:  BCF    03.6
034B:  CALL   1A0
....................   delay_ms(1500); 
034C:  MOVLW  06
034D:  MOVWF  2B
034E:  MOVLW  FA
034F:  MOVWF  30
0350:  CALL   04F
0351:  DECFSZ 2B,F
0352:  GOTO   34E
....................   printf(lcd_putc,"\fParola Giriniz"); 
0353:  MOVLW  1B
0354:  BSF    03.6
0355:  MOVWF  0D
0356:  MOVLW  00
0357:  MOVWF  0F
0358:  BCF    03.6
0359:  CALL   1A0
....................     
....................    int sec=0; 
....................    int yanlis=0; 
....................    int gelen; 
....................    int deneme_sayisi = 0;  
035A:  CLRF   27
035B:  CLRF   28
035C:  CLRF   2A
....................     
....................     
....................    while(true) 
....................    { 
....................   gelen = keypad_oku(); 
035D:  GOTO   1F6
035E:  MOVF   78,W
035F:  MOVWF  29
....................    if(basildi==1)  
0360:  DECFSZ 21,W
0361:  GOTO   3E1
....................    { 
....................      basildi=0; 
0362:  CLRF   21
....................       
....................      lcd_gotoxy(7+sec,2); 
0363:  MOVLW  07
0364:  ADDWF  27,W
0365:  MOVWF  2B
0366:  MOVWF  2F
0367:  MOVLW  02
0368:  MOVWF  30
0369:  CALL   162
....................      printf(lcd_putc,"*"); 
036A:  MOVLW  2A
036B:  MOVWF  2E
036C:  CALL   174
....................       
....................      if (sifre[sec] != gelen) 
036D:  MOVLW  22
036E:  ADDWF  27,W
036F:  MOVWF  04
0370:  BCF    03.7
0371:  MOVF   29,W
0372:  SUBWF  00,W
0373:  BTFSC  03.2
0374:  GOTO   39C
....................      { 
....................        yanlis=1; 
0375:  MOVLW  01
0376:  MOVWF  28
....................        sec = 0;  
0377:  CLRF   27
....................        deneme_sayisi++;  
0378:  INCF   2A,F
....................         
....................        if (deneme_sayisi >= 3) // Eðer üç kez yanlýþ giriþ yapýlýrsa 
0379:  MOVF   2A,W
037A:  SUBLW  02
037B:  BTFSC  03.0
037C:  GOTO   39B
....................        { 
....................          printf(lcd_putc,"\fKilitlendi!"); 
037D:  MOVLW  23
037E:  BSF    03.6
037F:  MOVWF  0D
0380:  MOVLW  00
0381:  MOVWF  0F
0382:  BCF    03.6
0383:  CALL   1A0
....................          output_low(ROLE);   
0384:  BCF    26.0
0385:  MOVF   26,W
0386:  BSF    03.5
0387:  MOVWF  07
0388:  BCF    03.5
0389:  BCF    07.0
....................          delay_ms(300000); 
038A:  MOVLW  A9
038B:  MOVWF  2B
038C:  MOVLW  E0
038D:  MOVWF  30
038E:  CALL   04F
038F:  DECFSZ 2B,F
0390:  GOTO   38C
0391:  CLRF   30
0392:  CALL   04F
....................          deneme_sayisi = 0;  
0393:  CLRF   2A
....................          printf(lcd_putc,"\fParola Giriniz"); 
0394:  MOVLW  2A
0395:  BSF    03.6
0396:  MOVWF  0D
0397:  MOVLW  00
0398:  MOVWF  0F
0399:  BCF    03.6
039A:  CALL   1A0
....................        } 
....................      } 
039B:  GOTO   3C4
....................      else  
....................      { 
....................        sec++; 
039C:  INCF   27,F
....................        if (sec == 4) // Þifre doðru girildiðinde 
039D:  MOVF   27,W
039E:  SUBLW  04
039F:  BTFSS  03.2
03A0:  GOTO   3C4
....................        { 
....................          printf(lcd_putc,"\fWELCOME"); 
03A1:  MOVLW  32
03A2:  BSF    03.6
03A3:  MOVWF  0D
03A4:  MOVLW  00
03A5:  MOVWF  0F
03A6:  BCF    03.6
03A7:  CALL   1A0
....................          output_high(ROLE); 
03A8:  BCF    26.0
03A9:  MOVF   26,W
03AA:  BSF    03.5
03AB:  MOVWF  07
03AC:  BCF    03.5
03AD:  BSF    07.0
....................          delay_ms(2000); 
03AE:  MOVLW  08
03AF:  MOVWF  2B
03B0:  MOVLW  FA
03B1:  MOVWF  30
03B2:  CALL   04F
03B3:  DECFSZ 2B,F
03B4:  GOTO   3B0
....................          output_low(ROLE); 
03B5:  BCF    26.0
03B6:  MOVF   26,W
03B7:  BSF    03.5
03B8:  MOVWF  07
03B9:  BCF    03.5
03BA:  BCF    07.0
....................          printf(lcd_putc,"\fParola Giriniz"); 
03BB:  MOVLW  37
03BC:  BSF    03.6
03BD:  MOVWF  0D
03BE:  MOVLW  00
03BF:  MOVWF  0F
03C0:  BCF    03.6
03C1:  CALL   1A0
....................          sec = 0;  
03C2:  CLRF   27
....................          deneme_sayisi = 0;  
03C3:  CLRF   2A
....................        } 
....................      } 
....................     
....................      if (yanlis == 1) 
03C4:  DECFSZ 28,W
03C5:  GOTO   3E1
....................      { 
....................        printf(lcd_putc,"\fParola Hatali"); 
03C6:  MOVLW  3F
03C7:  BSF    03.6
03C8:  MOVWF  0D
03C9:  MOVLW  00
03CA:  MOVWF  0F
03CB:  BCF    03.6
03CC:  CALL   1A0
....................        lcd_gotoxy(15,2); 
03CD:  MOVLW  0F
03CE:  MOVWF  2F
03CF:  MOVLW  02
03D0:  MOVWF  30
03D1:  CALL   162
....................        delay_ms(2000); 
03D2:  MOVLW  08
03D3:  MOVWF  2B
03D4:  MOVLW  FA
03D5:  MOVWF  30
03D6:  CALL   04F
03D7:  DECFSZ 2B,F
03D8:  GOTO   3D4
....................        yanlis=0; 
03D9:  CLRF   28
....................        printf(lcd_putc,"\fParola Giriniz"); 
03DA:  MOVLW  47
03DB:  BSF    03.6
03DC:  MOVWF  0D
03DD:  MOVLW  00
03DE:  MOVWF  0F
03DF:  BCF    03.6
03E0:  CALL   1A0
....................      }   
....................    } 
03E1:  GOTO   35D
....................  } 
.................... } 
03E2:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
